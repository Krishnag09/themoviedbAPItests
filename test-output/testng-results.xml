<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="7" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2019-03-08T08:30:49Z" name="Global test Suite" finished-at="2019-03-08T08:31:06Z" duration-ms="17726">
    <groups>
    </groups>
    <test started-at="2019-03-08T08:30:49Z" name="ParticularTest" finished-at="2019-03-08T08:30:49Z" duration-ms="554">
      <class name="themoviedb.org.projecttest.AuthenticationTests">
        <test-method signature="authenticationHappyPath(java.lang.String, java.lang.String)[pri:0, instance:themoviedb.org.projecttest.AuthenticationTests@dd05255]" started-at="2019-03-08T01:30:49Z" name="authenticationHappyPath" finished-at="2019-03-08T01:30:49Z" duration-ms="510" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9c61245fd1113728141e677b2f705aef]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[https://api.themoviedb.org/3/authentication/token/new]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- authenticationHappyPath -->
      </class> <!-- themoviedb.org.projecttest.AuthenticationTests -->
    </test> <!-- ParticularTest -->
    <test started-at="2019-03-08T08:30:49Z" name="Authentication with invalid key" finished-at="2019-03-08T08:30:50Z" duration-ms="425">
      <class name="themoviedb.org.projecttest.AuthenticationTests">
        <test-method signature="authenticationInvalidKey(java.lang.String, java.lang.String)[pri:0, instance:themoviedb.org.projecttest.AuthenticationTests@fbd1f6]" started-at="2019-03-08T01:30:49Z" name="authenticationInvalidKey" finished-at="2019-03-08T01:30:50Z" duration-ms="423" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9c61245fd1113728141e677b2f705ae]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[https://api.themoviedb.org/3/authentication/token/new]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- authenticationInvalidKey -->
      </class> <!-- themoviedb.org.projecttest.AuthenticationTests -->
    </test> <!-- Authentication with invalid key -->
    <test started-at="2019-03-08T08:30:50Z" name="Check request token" finished-at="2019-03-08T08:30:52Z" duration-ms="1931">
      <class name="themoviedb.org.projecttest.AuthenticationTests">
        <test-method signature="checkRequestToken(java.lang.String, java.lang.String)[pri:0, instance:themoviedb.org.projecttest.AuthenticationTests@3a52dba3]" started-at="2019-03-08T01:30:50Z" name="checkRequestToken" finished-at="2019-03-08T01:30:52Z" duration-ms="1930" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9c61245fd1113728141e677b2f705aef]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[https://api.themoviedb.org/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkRequestToken -->
      </class> <!-- themoviedb.org.projecttest.AuthenticationTests -->
    </test> <!-- Check request token -->
    <test started-at="2019-03-08T08:30:52Z" name="Check Movie Request ok" finished-at="2019-03-08T08:30:53Z" duration-ms="837">
      <class name="themoviedb.org.projecttest.OneMovieSmokeTest">
        <test-method signature="movieRequestok(java.lang.String, java.lang.String)[pri:0, instance:themoviedb.org.projecttest.OneMovieSmokeTest@61322f9d]" started-at="2019-03-08T01:30:52Z" name="movieRequestok" finished-at="2019-03-08T01:30:53Z" duration-ms="835" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9c61245fd1113728141e677b2f705aef]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[https://api.themoviedb.org/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- movieRequestok -->
      </class> <!-- themoviedb.org.projecttest.OneMovieSmokeTest -->
    </test> <!-- Check Movie Request ok -->
    <test started-at="2019-03-08T08:30:53Z" name="Check Movie Data " finished-at="2019-03-08T08:30:53Z" duration-ms="690">
      <class name="themoviedb.org.projecttest.OneMovieSmokeTest">
        <test-method signature="movieData(java.lang.String, java.lang.String)[pri:0, instance:themoviedb.org.projecttest.OneMovieSmokeTest@4c178a76]" started-at="2019-03-08T01:30:53Z" name="movieData" finished-at="2019-03-08T01:30:53Z" duration-ms="688" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9c61245fd1113728141e677b2f705aef]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[https://api.themoviedb.org/3/movie/550]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- movieData -->
      </class> <!-- themoviedb.org.projecttest.OneMovieSmokeTest -->
    </test> <!-- Check Movie Data  -->
    <test started-at="2019-03-08T08:30:53Z" name="Create session id and Update user info scenarios " finished-at="2019-03-08T08:31:06Z" duration-ms="13093">
      <class name="themoviedb.org.projecttest.Userprofile">
        <test-method signature="UserprofileUpdate()[pri:0, instance:themoviedb.org.projecttest.Userprofile@eb507b9]" started-at="2019-03-08T01:30:53Z" name="UserprofileUpdate" finished-at="2019-03-08T01:31:05Z" duration-ms="12221" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
JSON path status_message doesn't match.
Expected: is "Success"
  Actual: Invalid API key: You must be granted a valid key.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
JSON path status_message doesn't match.
Expected: is "Success"
  Actual: Invalid API key: You must be granted a valid key.

	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
	at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:238)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:494)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:656)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:169)
	at io.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:277)
	at io.restassured.specification.ResponseSpecification$content$0.callCurrent(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
	at io.restassured.specification.ResponseSpecification$content$0.callCurrent(Unknown Source)
	at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:260)
	at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:274)
	at themoviedb.org.projecttest.Userprofile.UserprofileUpdate(Userprofile.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserprofileUpdate -->
        <test-method signature="UserprofileUpdatewihtoutapproval()[pri:0, instance:themoviedb.org.projecttest.Userprofile@eb507b9]" started-at="2019-03-08T01:31:05Z" name="UserprofileUpdatewihtoutapproval" finished-at="2019-03-08T01:31:06Z" duration-ms="866" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserprofileUpdatewihtoutapproval -->
      </class> <!-- themoviedb.org.projecttest.Userprofile -->
    </test> <!-- Create session id and Update user info scenarios  -->
  </suite> <!-- Global test Suite -->
</testng-results>
